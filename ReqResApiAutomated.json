{
	"info": {
		"_postman_id": "9a30374f-94df-4fd0-bc0a-f7526df4e026",
		"name": "Req-Res-Api-Automation-Test",
		"description": "Collection to automate APIs from https://reqres.in/",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Functional-Tests",
			"item": [
				{
					"name": "Positive-Flow-Test",
					"item": [
						{
							"name": "Get a list of users from second page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3e904b0-dd3e-44cf-88eb-c6436a595089",
										"exec": [
											"\r",
											"console.log(\"When I retrieve the response and results\");\r",
											" \r",
											"pm.test(\"Then Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Then Total number of users should be 12\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.total).to.eql(12);\r",
											"});\r",
											"pm.test(\"Then The Page number should be second\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.total).to.eql(12);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a91deb1-d263-4781-9e2c-13d20644de1b",
										"exec": [
											"console.log(\"Given I send GET request on resource url '/api/users/2'\");\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}api/users?page=2",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Query for a single user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51fde7a9-6895-4c91-aabb-2c6362ac4746",
										"exec": [
											"pm.test(\"Then Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Then Data Field should not be empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.be.not.empty;\r",
											"});\r",
											"pm.test(\"Then Returned id should be 2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.id).to.equal(2);\r",
											"});\r",
											"pm.test(\"Then Returned email id should be janet.weaver@reqres.in\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.email).to.equal(\"janet.weaver@reqres.in\");\r",
											"});\r",
											"pm.test(\"Then Returned first name should be Janet\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.first_name).to.equal(\"Janet\");\r",
											"});\r",
											"pm.test(\"Then Returned ad urlshould be http://statuscode.org/\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.ad.url).to.equal(\"http://statuscode.org/\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}api/users/2",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"users",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a List of Catalogue Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a6c4212-7d88-4387-8558-ef86e7c6a0a4",
										"exec": [
											"pm.test(\"Then Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}api/catalogue-items",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"catalogue-items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Query for a single catalogue item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0651f41b-de0f-4730-9b67-16a012bc17df",
										"exec": [
											"pm.test(\"Then Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}api/catalogue-items/2",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"catalogue-items",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Validate response time for a list of users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3483e8a9-cfea-4a4c-9334-4c1c06a49642",
										"exec": [
											"pm.test(\"Then Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Then Response time should be more than 2999ms\", function () {\r",
											"    console.log(\"On purpose this condition was used to test minimum response time to make this test pass\");\r",
											"    pm.expect(pm.response.responseTime).to.be.above(2999);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}api/users?delay=3",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "delay",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3c0a331-bc33-4a10-b117-14a51859bdfc",
										"exec": [
											"pm.test(\"Then Status code should be 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Then Response value should not have empty value for created timestamp\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.createdAt).to.be.not.empty;\r",
											"});\r",
											"pm.test(\"Then Returned id should not be empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.be.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"James\",\r\n    \"job\": \"Spy\"\r\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}api/users",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Update details for a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5730b9d-d466-4bdc-ba85-971cb6d592d3",
										"exec": [
											"pm.test(\"Then Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Then Name should be 'AJ'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"AJ\");\r",
											"});\r",
											"pm.test(\"Then job should be 'BAND'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.job).to.eql(\"BAND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff74c49d-c977-4d7c-8ccc-b09fc053e8e9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"AJ\",\r\n    \"job\": \"BAND\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}api/users/2",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"users",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Update partial details for a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64a566b6-ff25-4d00-b236-66a683cf9285",
										"exec": [
											"pm.test(\"Then Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"morpheus\"\r\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}api/users/2",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"users",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Delete a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b685bb1b-a1de-40b2-8e52-e924dd0b0878",
										"exec": [
											"pm.test(\"Then Status code should be 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}api/users/1",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"users",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Register a User - Successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25e66870-9529-4000-bc96-e05866267dd0",
										"exec": [
											"pm.test(\"Then Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log (\"Inspite of expecting 201 status, I am using 200 status code so that for demo purpose this test goes thru as pass\");\r",
											"\r",
											"pm.test(\"Then Returned token value should not be empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.token).to.be.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Then Returned id  should not be null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.be.not.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}api/register",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Successful Login request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92565a6c-3c90-4a19-8777-3aa56c3ba87f",
										"exec": [
											"pm.test(\"Then Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Then Returned token value should not be empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.token).to.be.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}api/login",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Error-Handling-Testing",
					"item": [
						{
							"name": "Get Query for a non existing user ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e778d49-0774-4455-abcf-38d4d112b44d",
										"exec": [
											"pm.test(\"Then Status code should be 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}api/users/13",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"users",
										"13"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Query for a non existing catalogue item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4fcde51-425d-4bd7-8334-d41c6389edc7",
										"exec": [
											"pm.test(\"Then Status code should be 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}api/catalogue-items/13",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"catalogue-items",
										"13"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Unsuccessful login request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f49df72-7245-4d26-9309-531d528a0336",
										"exec": [
											"pm.test(\"Then Status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Then A relevant error message should inform the user about the missing data from request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing password\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}api/login",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Register a User - missing mandatory data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09fd4d1c-1970-48d3-adc7-5ecb66eb8b99",
										"exec": [
											"pm.test(\"Then Status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Then A relevant error message should inform the user about the missing data from request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing email or username\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}api/register",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Unsuccessfull registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52d082f3-0e0c-4091-b690-6eeac1c7538c",
										"exec": [
											"pm.test(\"Then Status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}api/register",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Register a User - with wrong format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "063f7147-57e8-4250-8f95-f2aaef20781f",
										"exec": [
											"pm.test(\"Then Status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Then A relevant error message should inform the user about the wrong data format from request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Note: Only defined users succeed registration\");\r",
											"});\r",
											"pm.test(\"Then An error message should be responded for the POST call\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holtreqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}api/register",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Security-Testing",
					"item": [
						{
							"name": "Post Create a user - cross-site scripting attack",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09ac59bb-47b2-42f4-bce8-ec8273956890",
										"exec": [
											"pm.test(\"Then Status code should be 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": “<script>alert(\\”gotcha!\\”)</script>”,\r\n    \"job\": \"Spy\"\r\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}api/users",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Register a User - wrong authentication method used",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07a5818a-1b6a-4c9a-92e0-80a1504b4a2a",
										"exec": [
											"pm.test(\"Then Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(\"Actually cannot demonstrate this test as no checks are made on the API authorisation mechanism, just created a test for purpose of showing coverage\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}api/register",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Query user with a-command injection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f1a3d32-3547-4b69-ac9a-76b1a57a400e",
										"exec": [
											"pm.test(\"Then Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Just a demo of command injection\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}api/users ?command=rm -rf/",
									"host": [
										"{{baseUrl}}api"
									],
									"path": [
										"users "
									],
									"query": [
										{
											"key": "command",
											"value": "rm -rf/"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "E2E-Integration-tests",
			"item": [
				{
					"name": "Post Successful Login request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "efd2e950-c4a0-4970-bf37-ead37173e438",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Then Status code should be 200 for a successful login post request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Then A token should be returned\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"pm.globals.set(\"token\", jsonData.token);\r",
									"console.log(\"For Successful Login Request this token was returned for future authentication : \" + pm.variables.get(\"token\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}api/login",
							"host": [
								"{{baseUrl}}api"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f915140f-bfd2-4a98-adaf-92240964752b",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Then Status code should be 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Then An id should be returned\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.globals.set(\"new-user-id\", jsonData.id);\r",
									"console.log(\"The new user id getting stored in new-user-id variable is : \"+pm.variables.get(\"new-user-id\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8948436d-c0b7-4740-aac2-bed6d054930d",
								"exec": [
									"console.log(\"For demo purposes, this token value is now stored in a variable and being used as bearer token with this call : \"+pm.variables.get(\"token\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"JamesE2E\",\r\n    \"job\": \"SpyTester\",\r\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}api/users",
							"host": [
								"{{baseUrl}}api"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Query for a single user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aea9d361-b6cc-4dbd-a171-fbe33f4c5218",
								"exec": [
									"pm.test(\"Then Status code should be 404 as the parameterised user is actually not saved in the reqres.in db\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    console.log(\"Tested new user does(not) exist !!!! \")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dfcb21ff-0479-422c-92a5-7cb6545a959b",
								"exec": [
									"console.log(\"Utilising the user id generated from previous step in doing a GET call : \" + pm.variables.get(\"token\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}api/users/{{new-user-id}}",
							"host": [
								"{{baseUrl}}api"
							],
							"path": [
								"users",
								"{{new-user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Update details for a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "274979da-c72d-49c6-811a-9c4eaa234382",
								"exec": [
									"pm.test(\"Then Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Oomkar\",\r\n    \"job\": \"Automation Engineer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}api/users/{{new-user-id}}",
							"host": [
								"{{baseUrl}}api"
							],
							"path": [
								"users",
								"{{new-user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Update partial details for a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c570bfa-ade7-44b2-8534-1e6949976db3",
								"exec": [
									"pm.test(\"Then Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}api/users/{{new-user-id}}",
							"host": [
								"{{baseUrl}}api"
							],
							"path": [
								"users",
								"{{new-user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Delete a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9bdd5c2-5790-4585-8626-5212e4ac2090",
								"exec": [
									"pm.test(\"Then Status code should be 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}api/users/{{new-user-id}}",
							"host": [
								"{{baseUrl}}api"
							],
							"path": [
								"users",
								"{{new-user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Query for a single user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83a58472-ba42-4395-be4d-2b027a64fc2a",
								"exec": [
									"pm.test(\"Then Status code should be 404 as the parameterised user is now meant to be deleted\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    console.log(\"Tested new user does not exist !!!! \")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b242619a-a372-4b81-8c0d-681d1232c04c",
								"exec": [
									"console.log(\"Utilising the user id generated and then deleted from previous step doing a GET call : \" + pm.variables.get(\"new-user-id\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}api/users/{{new-user-id}}",
							"host": [
								"{{baseUrl}}api"
							],
							"path": [
								"users",
								"{{new-user-id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c75990f2-11d4-49e0-927c-0c7d52216247",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5b40f02a-24bd-47e5-81a9-a9ce2b62ece1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data-Driven-Looped-User-Creation",
			"item": [
				{
					"name": "Post Create user with different data parameters covering positive negative and boundary tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32146c81-b455-4ace-8b9c-1f28b95b4085",
								"exec": [
									"pm.test(\"Then Status code should be 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"console.log(\"First name used for this test was: \"+ pm.iterationData.get(\"firstname\"));\r",
									"console.log(\"Job used for this test was: \"+ pm.iterationData.get(\"job\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d51ce7b9-13d0-4468-a396-e413849afcb7",
								"exec": [
									"console.log(\"All the data for the body of this POST request is being read from the csv file supplied in iterative manner\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": {{firstname}},\r\n    \"job\": {{job}}\r\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}api/users",
							"host": [
								"{{baseUrl}}api"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b1a68f8a-f4b7-44ff-9270-3ad086a3dd7f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e97bc0c4-da99-4794-9c15-7fa139b7a1c4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}